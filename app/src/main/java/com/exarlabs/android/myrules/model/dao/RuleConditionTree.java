package com.exarlabs.android.myrules.model.dao;

import java.util.List;
import com.exarlabs.android.myrules.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.exarlabs.android.myrules.business.condition.ConditionTree;
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_CONDITION_TREE".
 */
public class RuleConditionTree extends ConditionTree  {

    private Long id;
    private int operator;
    private int state;
    private Long parentCondition;
    private Long conditionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleConditionTreeDao myDao;

    private RuleCondition ruleCondition;
    private Long ruleCondition__resolvedKey;

    private List<RuleConditionTree> childConditions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleConditionTree() {
    }

    public RuleConditionTree(Long id) {
        this.id = id;
    }

    public RuleConditionTree(Long id, int operator, int state, Long parentCondition, Long conditionId) {
        this.id = id;
        this.operator = operator;
        this.state = state;
        this.parentCondition = parentCondition;
        this.conditionId = conditionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleConditionTreeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getOperator() {
        return operator;
    }

    public void setOperator(int operator) {
        this.operator = operator;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public Long getParentCondition() {
        return parentCondition;
    }

    public void setParentCondition(Long parentCondition) {
        this.parentCondition = parentCondition;
    }

    public Long getConditionId() {
        return conditionId;
    }

    public void setConditionId(Long conditionId) {
        this.conditionId = conditionId;
    }

    /** To-one relationship, resolved on first access. */
    public RuleCondition getRuleCondition() {
        Long __key = this.conditionId;
        if (ruleCondition__resolvedKey == null || !ruleCondition__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleConditionDao targetDao = daoSession.getRuleConditionDao();
            RuleCondition ruleConditionNew = targetDao.load(__key);
            synchronized (this) {
                ruleCondition = ruleConditionNew;
            	ruleCondition__resolvedKey = __key;
            }
        }
        return ruleCondition;
    }

    public void setRuleCondition(RuleCondition ruleCondition) {
        synchronized (this) {
            this.ruleCondition = ruleCondition;
            conditionId = ruleCondition == null ? null : ruleCondition.getId();
            ruleCondition__resolvedKey = conditionId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RuleConditionTree> getChildConditions() {
        if (childConditions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleConditionTreeDao targetDao = daoSession.getRuleConditionTreeDao();
            List<RuleConditionTree> childConditionsNew = targetDao._queryRuleConditionTree_ChildConditions(id);
            synchronized (this) {
                if(childConditions == null) {
                    childConditions = childConditionsNew;
                }
            }
        }
        return childConditions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildConditions() {
        childConditions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
