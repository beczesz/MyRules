package com.exarlabs.android.myrules.model.dao;

import com.exarlabs.android.myrules.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_CONDITION_LINK".
 */
public class RuleConditionLink {

    private Long id;
    private Long ruleId;
    private Long conditionId;
    private Long ruleConditionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleConditionLinkDao myDao;

    private RuleRecord ruleRecord;
    private Long ruleRecord__resolvedKey;

    private RuleCondition ruleCondition;
    private Long ruleCondition__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleConditionLink() {
    }

    public RuleConditionLink(Long id) {
        this.id = id;
    }

    public RuleConditionLink(Long id, Long ruleId, Long conditionId, Long ruleConditionId) {
        this.id = id;
        this.ruleId = ruleId;
        this.conditionId = conditionId;
        this.ruleConditionId = ruleConditionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleConditionLinkDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRuleId() {
        return ruleId;
    }

    public void setRuleId(Long ruleId) {
        this.ruleId = ruleId;
    }

    public Long getConditionId() {
        return conditionId;
    }

    public void setConditionId(Long conditionId) {
        this.conditionId = conditionId;
    }

    public Long getRuleConditionId() {
        return ruleConditionId;
    }

    public void setRuleConditionId(Long ruleConditionId) {
        this.ruleConditionId = ruleConditionId;
    }

    /** To-one relationship, resolved on first access. */
    public RuleRecord getRuleRecord() {
        Long __key = this.ruleId;
        if (ruleRecord__resolvedKey == null || !ruleRecord__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleRecordDao targetDao = daoSession.getRuleRecordDao();
            RuleRecord ruleRecordNew = targetDao.load(__key);
            synchronized (this) {
                ruleRecord = ruleRecordNew;
            	ruleRecord__resolvedKey = __key;
            }
        }
        return ruleRecord;
    }

    public void setRuleRecord(RuleRecord ruleRecord) {
        synchronized (this) {
            this.ruleRecord = ruleRecord;
            ruleId = ruleRecord == null ? null : ruleRecord.getId();
            ruleRecord__resolvedKey = ruleId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RuleCondition getRuleCondition() {
        Long __key = this.ruleConditionId;
        if (ruleCondition__resolvedKey == null || !ruleCondition__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleConditionDao targetDao = daoSession.getRuleConditionDao();
            RuleCondition ruleConditionNew = targetDao.load(__key);
            synchronized (this) {
                ruleCondition = ruleConditionNew;
            	ruleCondition__resolvedKey = __key;
            }
        }
        return ruleCondition;
    }

    public void setRuleCondition(RuleCondition ruleCondition) {
        synchronized (this) {
            this.ruleCondition = ruleCondition;
            ruleConditionId = ruleCondition == null ? null : ruleCondition.getId();
            ruleCondition__resolvedKey = ruleConditionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
