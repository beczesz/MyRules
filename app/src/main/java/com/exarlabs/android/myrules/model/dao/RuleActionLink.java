package com.exarlabs.android.myrules.model.dao;

import com.exarlabs.android.myrules.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_ACTION_LINK".
 */
public class RuleActionLink {

    private Long id;
    private Long ruleId;
    private Long ruleRecordId;
    private Long actionId;
    private Long ruleActionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleActionLinkDao myDao;

    private RuleRecord ruleRecord;
    private Long ruleRecord__resolvedKey;

    private RuleAction ruleAction;
    private Long ruleAction__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleActionLink() {
    }

    public RuleActionLink(Long id) {
        this.id = id;
    }

    public RuleActionLink(Long id, Long ruleId, Long ruleRecordId, Long actionId, Long ruleActionId) {
        this.id = id;
        this.ruleId = ruleId;
        this.ruleRecordId = ruleRecordId;
        this.actionId = actionId;
        this.ruleActionId = ruleActionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleActionLinkDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRuleId() {
        return ruleId;
    }

    public void setRuleId(Long ruleId) {
        this.ruleId = ruleId;
    }

    public Long getRuleRecordId() {
        return ruleRecordId;
    }

    public void setRuleRecordId(Long ruleRecordId) {
        this.ruleRecordId = ruleRecordId;
    }

    public Long getActionId() {
        return actionId;
    }

    public void setActionId(Long actionId) {
        this.actionId = actionId;
    }

    public Long getRuleActionId() {
        return ruleActionId;
    }

    public void setRuleActionId(Long ruleActionId) {
        this.ruleActionId = ruleActionId;
    }

    /** To-one relationship, resolved on first access. */
    public RuleRecord getRuleRecord() {
        Long __key = this.ruleRecordId;
        if (ruleRecord__resolvedKey == null || !ruleRecord__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleRecordDao targetDao = daoSession.getRuleRecordDao();
            RuleRecord ruleRecordNew = targetDao.load(__key);
            synchronized (this) {
                ruleRecord = ruleRecordNew;
            	ruleRecord__resolvedKey = __key;
            }
        }
        return ruleRecord;
    }

    public void setRuleRecord(RuleRecord ruleRecord) {
        synchronized (this) {
            this.ruleRecord = ruleRecord;
            ruleRecordId = ruleRecord == null ? null : ruleRecord.getId();
            ruleRecord__resolvedKey = ruleRecordId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RuleAction getRuleAction() {
        Long __key = this.ruleActionId;
        if (ruleAction__resolvedKey == null || !ruleAction__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleActionDao targetDao = daoSession.getRuleActionDao();
            RuleAction ruleActionNew = targetDao.load(__key);
            synchronized (this) {
                ruleAction = ruleActionNew;
            	ruleAction__resolvedKey = __key;
            }
        }
        return ruleAction;
    }

    public void setRuleAction(RuleAction ruleAction) {
        synchronized (this) {
            this.ruleAction = ruleAction;
            ruleActionId = ruleAction == null ? null : ruleAction.getId();
            ruleAction__resolvedKey = ruleActionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
