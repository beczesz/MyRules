package com.exarlabs.android.myrules.model.dao;

import java.util.List;
import com.exarlabs.android.myrules.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.exarlabs.android.myrules.business.action.Action;
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_ACTION".
 */
public class RuleAction extends Action  {

    private Long id;
    private int type;
    private String actionName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleActionDao myDao;

    private List<RuleActionProperty> properties;
    private List<RuleActionLink> ruleActionLinks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleAction() {
    }

    public RuleAction(Long id) {
        this.id = id;
    }

    public RuleAction(Long id, int type, String actionName) {
        this.id = id;
        this.type = type;
        this.actionName = actionName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleActionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getActionName() {
        return actionName;
    }

    public void setActionName(String actionName) {
        this.actionName = actionName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RuleActionProperty> getProperties() {
        if (properties == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleActionPropertyDao targetDao = daoSession.getRuleActionPropertyDao();
            List<RuleActionProperty> propertiesNew = targetDao._queryRuleAction_Properties(id);
            synchronized (this) {
                if(properties == null) {
                    properties = propertiesNew;
                }
            }
        }
        return properties;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProperties() {
        properties = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RuleActionLink> getRuleActionLinks() {
        if (ruleActionLinks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleActionLinkDao targetDao = daoSession.getRuleActionLinkDao();
            List<RuleActionLink> ruleActionLinksNew = targetDao._queryRuleAction_RuleActionLinks(id);
            synchronized (this) {
                if(ruleActionLinks == null) {
                    ruleActionLinks = ruleActionLinksNew;
                }
            }
        }
        return ruleActionLinks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRuleActionLinks() {
        ruleActionLinks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    /**
     * @return is the record attached
     */
    public boolean isAttached() {
        return daoSession != null;
    }
    // KEEP METHODS END

}
