package com.exarlabs.android.myrules.model.dao;

import java.util.List;
import com.exarlabs.android.myrules.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.exarlabs.android.myrules.business.rule.Rule;
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_RECORD".
 */
public class RuleRecord extends Rule  {

    private Long id;
    /** Not-null value. */
    private String ruleName;
    private int state;
    private int eventCode;
    private Long ruleConditionTreeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleRecordDao myDao;

    private RuleConditionTree ruleConditionTree;
    private Long ruleConditionTree__resolvedKey;

    private List<RuleActionLink> ruleActionLinks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleRecord() {
    }

    public RuleRecord(Long id) {
        this.id = id;
    }

    public RuleRecord(Long id, String ruleName, int state, int eventCode, Long ruleConditionTreeId) {
        this.id = id;
        this.ruleName = ruleName;
        this.state = state;
        this.eventCode = eventCode;
        this.ruleConditionTreeId = ruleConditionTreeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRuleName() {
        return ruleName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRuleName(String ruleName) {
        this.ruleName = ruleName;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public int getEventCode() {
        return eventCode;
    }

    public void setEventCode(int eventCode) {
        this.eventCode = eventCode;
    }

    public Long getRuleConditionTreeId() {
        return ruleConditionTreeId;
    }

    public void setRuleConditionTreeId(Long ruleConditionTreeId) {
        this.ruleConditionTreeId = ruleConditionTreeId;
    }

    /** To-one relationship, resolved on first access. */
    public RuleConditionTree getRuleConditionTree() {
        Long __key = this.ruleConditionTreeId;
        if (ruleConditionTree__resolvedKey == null || !ruleConditionTree__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleConditionTreeDao targetDao = daoSession.getRuleConditionTreeDao();
            RuleConditionTree ruleConditionTreeNew = targetDao.load(__key);
            synchronized (this) {
                ruleConditionTree = ruleConditionTreeNew;
            	ruleConditionTree__resolvedKey = __key;
            }
        }
        return ruleConditionTree;
    }

    public void setRuleConditionTree(RuleConditionTree ruleConditionTree) {
        synchronized (this) {
            this.ruleConditionTree = ruleConditionTree;
            ruleConditionTreeId = ruleConditionTree == null ? null : ruleConditionTree.getId();
            ruleConditionTree__resolvedKey = ruleConditionTreeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RuleActionLink> getRuleActionLinks() {
        if (ruleActionLinks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleActionLinkDao targetDao = daoSession.getRuleActionLinkDao();
            List<RuleActionLink> ruleActionLinksNew = targetDao._queryRuleRecord_RuleActionLinks(id);
            synchronized (this) {
                if(ruleActionLinks == null) {
                    ruleActionLinks = ruleActionLinksNew;
                }
            }
        }
        return ruleActionLinks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRuleActionLinks() {
        ruleActionLinks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    /**
     * @return is the record attached
     */
    public boolean isAttached() {
        return myDao != null;
    }
    // KEEP METHODS END

}
