package com.exarlabs.android.myrules.model.dao;

import java.util.List;

import com.exarlabs.android.myrules.business.rule.Rule;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RULE_RECORD".
 */
public class RuleRecord extends Rule {

    private Long id;
    private String ruleName;
    private int state;
    private int eventCode;
    private Long conditionLinkId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleRecordDao myDao;

    private RuleConditionLink ruleConditionLink;
    private Long ruleConditionLink__resolvedKey;

    private List<RuleActionLink> ruleActionLinks;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RuleRecord() {
    }

    public RuleRecord(Long id) {
        this.id = id;
    }

    public RuleRecord(Long id, String ruleName, int state, int eventCode, Long conditionLinkId) {
        this.id = id;
        this.ruleName = ruleName;
        this.state = state;
        this.eventCode = eventCode;
        this.conditionLinkId = conditionLinkId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRuleName() {
        return ruleName;
    }

    public void setRuleName(String ruleName) {
        this.ruleName = ruleName;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public int getEventCode() {
        return eventCode;
    }

    public void setEventCode(int eventCode) {
        this.eventCode = eventCode;
    }

    public Long getConditionLinkId() {
        return conditionLinkId;
    }

    public void setConditionLinkId(Long conditionLinkId) {
        this.conditionLinkId = conditionLinkId;
    }

    /** To-one relationship, resolved on first access. */
    public RuleConditionLink getRuleConditionLink() {
        Long __key = this.conditionLinkId;
        if (ruleConditionLink__resolvedKey == null || !ruleConditionLink__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleConditionLinkDao targetDao = daoSession.getRuleConditionLinkDao();
            RuleConditionLink ruleConditionLinkNew = targetDao.load(__key);
            synchronized (this) {
                ruleConditionLink = ruleConditionLinkNew;
            	ruleConditionLink__resolvedKey = __key;
            }
        }
        return ruleConditionLink;
    }

    public void setRuleConditionLink(RuleConditionLink ruleConditionLink) {
        synchronized (this) {
            this.ruleConditionLink = ruleConditionLink;
            conditionLinkId = ruleConditionLink == null ? null : ruleConditionLink.getId();
            ruleConditionLink__resolvedKey = conditionLinkId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RuleActionLink> getRuleActionLinks() {
        if (ruleActionLinks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleActionLinkDao targetDao = daoSession.getRuleActionLinkDao();
            List<RuleActionLink> ruleActionLinksNew = targetDao._queryRuleRecord_RuleActionLinks(id);
            synchronized (this) {
                if(ruleActionLinks == null) {
                    ruleActionLinks = ruleActionLinksNew;
                }
            }
        }
        return ruleActionLinks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRuleActionLinks() {
        ruleActionLinks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
