package com.exarlabs.android.myrules.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.exarlabs.android.myrules.model.dao.RuleConditionLink;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RULE_CONDITION_LINK".
*/
public class RuleConditionLinkDao extends AbstractDao<RuleConditionLink, Long> {

    public static final String TABLENAME = "RULE_CONDITION_LINK";

    /**
     * Properties of entity RuleConditionLink.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RuleId = new Property(1, Long.class, "ruleId", false, "RULE_ID");
        public final static Property ConditionId = new Property(2, Long.class, "conditionId", false, "CONDITION_ID");
        public final static Property RuleConditionId = new Property(3, Long.class, "ruleConditionId", false, "RULE_CONDITION_ID");
    };

    private DaoSession daoSession;

    private Query<RuleConditionLink> ruleCondition_RuleConditionLinksQuery;

    public RuleConditionLinkDao(DaoConfig config) {
        super(config);
    }
    
    public RuleConditionLinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RULE_CONDITION_LINK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RULE_ID\" INTEGER," + // 1: ruleId
                "\"CONDITION_ID\" INTEGER," + // 2: conditionId
                "\"RULE_CONDITION_ID\" INTEGER);"); // 3: ruleConditionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RULE_CONDITION_LINK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RuleConditionLink entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ruleId = entity.getRuleId();
        if (ruleId != null) {
            stmt.bindLong(2, ruleId);
        }
 
        Long conditionId = entity.getConditionId();
        if (conditionId != null) {
            stmt.bindLong(3, conditionId);
        }
 
        Long ruleConditionId = entity.getRuleConditionId();
        if (ruleConditionId != null) {
            stmt.bindLong(4, ruleConditionId);
        }
    }

    @Override
    protected void attachEntity(RuleConditionLink entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RuleConditionLink readEntity(Cursor cursor, int offset) {
        RuleConditionLink entity = new RuleConditionLink( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ruleId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // conditionId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // ruleConditionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RuleConditionLink entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRuleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setConditionId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRuleConditionId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RuleConditionLink entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RuleConditionLink entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ruleConditionLinks" to-many relationship of RuleCondition. */
    public List<RuleConditionLink> _queryRuleCondition_RuleConditionLinks(Long conditionId) {
        synchronized (this) {
            if (ruleCondition_RuleConditionLinksQuery == null) {
                QueryBuilder<RuleConditionLink> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConditionId.eq(null));
                ruleCondition_RuleConditionLinksQuery = queryBuilder.build();
            }
        }
        Query<RuleConditionLink> query = ruleCondition_RuleConditionLinksQuery.forCurrentThread();
        query.setParameter(0, conditionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRuleRecordDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRuleConditionDao().getAllColumns());
            builder.append(" FROM RULE_CONDITION_LINK T");
            builder.append(" LEFT JOIN RULE_RECORD T0 ON T.\"RULE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN RULE_CONDITION T1 ON T.\"RULE_CONDITION_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RuleConditionLink loadCurrentDeep(Cursor cursor, boolean lock) {
        RuleConditionLink entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RuleRecord ruleRecord = loadCurrentOther(daoSession.getRuleRecordDao(), cursor, offset);
        entity.setRuleRecord(ruleRecord);
        offset += daoSession.getRuleRecordDao().getAllColumns().length;

        RuleCondition ruleCondition = loadCurrentOther(daoSession.getRuleConditionDao(), cursor, offset);
        entity.setRuleCondition(ruleCondition);

        return entity;    
    }

    public RuleConditionLink loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RuleConditionLink> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RuleConditionLink> list = new ArrayList<RuleConditionLink>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RuleConditionLink> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RuleConditionLink> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
