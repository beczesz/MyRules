package com.exarlabs.android.myrules.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.exarlabs.android.myrules.model.dao.RuleCondition;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RULE_CONDITION".
*/
public class RuleConditionDao extends AbstractDao<RuleCondition, Long> {

    public static final String TABLENAME = "RULE_CONDITION";

    /**
     * Properties of entity RuleCondition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConditionName = new Property(1, String.class, "conditionName", false, "CONDITION_NAME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Operator = new Property(3, int.class, "operator", false, "OPERATOR");
        public final static Property ParentCondition = new Property(4, Long.class, "parentCondition", false, "PARENT_CONDITION");
    };

    private DaoSession daoSession;

    private Query<RuleCondition> ruleCondition_ChildConditionsQuery;

    public RuleConditionDao(DaoConfig config) {
        super(config);
    }
    
    public RuleConditionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RULE_CONDITION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONDITION_NAME\" TEXT," + // 1: conditionName
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"OPERATOR\" INTEGER NOT NULL ," + // 3: operator
                "\"PARENT_CONDITION\" INTEGER);"); // 4: parentCondition
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RULE_CONDITION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RuleCondition entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conditionName = entity.getConditionName();
        if (conditionName != null) {
            stmt.bindString(2, conditionName);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getOperator());
 
        Long parentCondition = entity.getParentCondition();
        if (parentCondition != null) {
            stmt.bindLong(5, parentCondition);
        }
    }

    @Override
    protected void attachEntity(RuleCondition entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RuleCondition readEntity(Cursor cursor, int offset) {
        RuleCondition entity = new RuleCondition( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // conditionName
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // operator
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // parentCondition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RuleCondition entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConditionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setOperator(cursor.getInt(offset + 3));
        entity.setParentCondition(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RuleCondition entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RuleCondition entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "childConditions" to-many relationship of RuleCondition. */
    public List<RuleCondition> _queryRuleCondition_ChildConditions(Long parentCondition) {
        synchronized (this) {
            if (ruleCondition_ChildConditionsQuery == null) {
                QueryBuilder<RuleCondition> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentCondition.eq(null));
                ruleCondition_ChildConditionsQuery = queryBuilder.build();
            }
        }
        Query<RuleCondition> query = ruleCondition_ChildConditionsQuery.forCurrentThread();
        query.setParameter(0, parentCondition);
        return query.list();
    }

}
