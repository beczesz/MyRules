package com.exarlabs.android.myrules.model.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.exarlabs.android.myrules.model.dao.RuleCondition;
import com.exarlabs.android.myrules.model.dao.RuleConditionProperty;
import com.exarlabs.android.myrules.model.dao.Rule;

import com.exarlabs.android.myrules.model.dao.RuleConditionDao;
import com.exarlabs.android.myrules.model.dao.RuleConditionPropertyDao;
import com.exarlabs.android.myrules.model.dao.RuleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig ruleConditionDaoConfig;
    private final DaoConfig ruleConditionPropertyDaoConfig;
    private final DaoConfig ruleDaoConfig;

    private final RuleConditionDao ruleConditionDao;
    private final RuleConditionPropertyDao ruleConditionPropertyDao;
    private final RuleDao ruleDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        ruleConditionDaoConfig = daoConfigMap.get(RuleConditionDao.class).clone();
        ruleConditionDaoConfig.initIdentityScope(type);

        ruleConditionPropertyDaoConfig = daoConfigMap.get(RuleConditionPropertyDao.class).clone();
        ruleConditionPropertyDaoConfig.initIdentityScope(type);

        ruleDaoConfig = daoConfigMap.get(RuleDao.class).clone();
        ruleDaoConfig.initIdentityScope(type);

        ruleConditionDao = new RuleConditionDao(ruleConditionDaoConfig, this);
        ruleConditionPropertyDao = new RuleConditionPropertyDao(ruleConditionPropertyDaoConfig, this);
        ruleDao = new RuleDao(ruleDaoConfig, this);

        registerDao(RuleCondition.class, ruleConditionDao);
        registerDao(RuleConditionProperty.class, ruleConditionPropertyDao);
        registerDao(Rule.class, ruleDao);
    }
    
    public void clear() {
        ruleConditionDaoConfig.getIdentityScope().clear();
        ruleConditionPropertyDaoConfig.getIdentityScope().clear();
        ruleDaoConfig.getIdentityScope().clear();
    }

    public RuleConditionDao getRuleConditionDao() {
        return ruleConditionDao;
    }

    public RuleConditionPropertyDao getRuleConditionPropertyDao() {
        return ruleConditionPropertyDao;
    }

    public RuleDao getRuleDao() {
        return ruleDao;
    }

}
