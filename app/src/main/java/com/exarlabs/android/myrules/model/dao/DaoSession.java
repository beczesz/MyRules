package com.exarlabs.android.myrules.model.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.exarlabs.android.myrules.model.dao.RuleCondition;
import com.exarlabs.android.myrules.model.dao.RuleConditionProperty;
import com.exarlabs.android.myrules.model.dao.RuleConditionTree;
import com.exarlabs.android.myrules.model.dao.RuleAction;
import com.exarlabs.android.myrules.model.dao.RuleActionProperty;
import com.exarlabs.android.myrules.model.dao.RuleRecord;
import com.exarlabs.android.myrules.model.dao.RuleActionLink;

import com.exarlabs.android.myrules.model.dao.RuleConditionDao;
import com.exarlabs.android.myrules.model.dao.RuleConditionPropertyDao;
import com.exarlabs.android.myrules.model.dao.RuleConditionTreeDao;
import com.exarlabs.android.myrules.model.dao.RuleActionDao;
import com.exarlabs.android.myrules.model.dao.RuleActionPropertyDao;
import com.exarlabs.android.myrules.model.dao.RuleRecordDao;
import com.exarlabs.android.myrules.model.dao.RuleActionLinkDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig ruleConditionDaoConfig;
    private final DaoConfig ruleConditionPropertyDaoConfig;
    private final DaoConfig ruleConditionTreeDaoConfig;
    private final DaoConfig ruleActionDaoConfig;
    private final DaoConfig ruleActionPropertyDaoConfig;
    private final DaoConfig ruleRecordDaoConfig;
    private final DaoConfig ruleActionLinkDaoConfig;

    private final RuleConditionDao ruleConditionDao;
    private final RuleConditionPropertyDao ruleConditionPropertyDao;
    private final RuleConditionTreeDao ruleConditionTreeDao;
    private final RuleActionDao ruleActionDao;
    private final RuleActionPropertyDao ruleActionPropertyDao;
    private final RuleRecordDao ruleRecordDao;
    private final RuleActionLinkDao ruleActionLinkDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        ruleConditionDaoConfig = daoConfigMap.get(RuleConditionDao.class).clone();
        ruleConditionDaoConfig.initIdentityScope(type);

        ruleConditionPropertyDaoConfig = daoConfigMap.get(RuleConditionPropertyDao.class).clone();
        ruleConditionPropertyDaoConfig.initIdentityScope(type);

        ruleConditionTreeDaoConfig = daoConfigMap.get(RuleConditionTreeDao.class).clone();
        ruleConditionTreeDaoConfig.initIdentityScope(type);

        ruleActionDaoConfig = daoConfigMap.get(RuleActionDao.class).clone();
        ruleActionDaoConfig.initIdentityScope(type);

        ruleActionPropertyDaoConfig = daoConfigMap.get(RuleActionPropertyDao.class).clone();
        ruleActionPropertyDaoConfig.initIdentityScope(type);

        ruleRecordDaoConfig = daoConfigMap.get(RuleRecordDao.class).clone();
        ruleRecordDaoConfig.initIdentityScope(type);

        ruleActionLinkDaoConfig = daoConfigMap.get(RuleActionLinkDao.class).clone();
        ruleActionLinkDaoConfig.initIdentityScope(type);

        ruleConditionDao = new RuleConditionDao(ruleConditionDaoConfig, this);
        ruleConditionPropertyDao = new RuleConditionPropertyDao(ruleConditionPropertyDaoConfig, this);
        ruleConditionTreeDao = new RuleConditionTreeDao(ruleConditionTreeDaoConfig, this);
        ruleActionDao = new RuleActionDao(ruleActionDaoConfig, this);
        ruleActionPropertyDao = new RuleActionPropertyDao(ruleActionPropertyDaoConfig, this);
        ruleRecordDao = new RuleRecordDao(ruleRecordDaoConfig, this);
        ruleActionLinkDao = new RuleActionLinkDao(ruleActionLinkDaoConfig, this);

        registerDao(RuleCondition.class, ruleConditionDao);
        registerDao(RuleConditionProperty.class, ruleConditionPropertyDao);
        registerDao(RuleConditionTree.class, ruleConditionTreeDao);
        registerDao(RuleAction.class, ruleActionDao);
        registerDao(RuleActionProperty.class, ruleActionPropertyDao);
        registerDao(RuleRecord.class, ruleRecordDao);
        registerDao(RuleActionLink.class, ruleActionLinkDao);
    }
    
    public void clear() {
        ruleConditionDaoConfig.getIdentityScope().clear();
        ruleConditionPropertyDaoConfig.getIdentityScope().clear();
        ruleConditionTreeDaoConfig.getIdentityScope().clear();
        ruleActionDaoConfig.getIdentityScope().clear();
        ruleActionPropertyDaoConfig.getIdentityScope().clear();
        ruleRecordDaoConfig.getIdentityScope().clear();
        ruleActionLinkDaoConfig.getIdentityScope().clear();
    }

    public RuleConditionDao getRuleConditionDao() {
        return ruleConditionDao;
    }

    public RuleConditionPropertyDao getRuleConditionPropertyDao() {
        return ruleConditionPropertyDao;
    }

    public RuleConditionTreeDao getRuleConditionTreeDao() {
        return ruleConditionTreeDao;
    }

    public RuleActionDao getRuleActionDao() {
        return ruleActionDao;
    }

    public RuleActionPropertyDao getRuleActionPropertyDao() {
        return ruleActionPropertyDao;
    }

    public RuleRecordDao getRuleRecordDao() {
        return ruleRecordDao;
    }

    public RuleActionLinkDao getRuleActionLinkDao() {
        return ruleActionLinkDao;
    }

}
